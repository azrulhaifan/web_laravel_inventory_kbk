<?php

namespace App\Filament\Resources;

use App\Filament\Resources\StockOutResource\Pages;
use App\Models\StockOut;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Support\HtmlString;

class StockOutResource extends Resource
{
    protected static ?string $model = StockOut::class;

    protected static ?string $navigationIcon = 'heroicon-o-arrow-up-circle';
    protected static ?string $navigationGroup = 'Stock Management';
    protected static ?int $navigationSort = 30;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('reference_type')
                    ->label('Reference ID Type')
                    ->options([
                        'auto' => 'Auto Generated',
                        'direct' => 'Direct Sale',
                        'shopee' => 'Shopee',
                        'tokped' => 'Tokopedia',
                        'tiktok' => 'TikTok Shop',
                    ])
                    ->default('auto')
                    ->live(),

                Forms\Components\TextInput::make('reference_id')
                    ->disabled(fn(callable $get) => $get('reference_type') === 'auto')
                    ->dehydrated(fn(callable $get) => $get('reference_type') !== 'auto')
                    ->required(fn(callable $get) => $get('reference_type') !== 'auto')
                    ->placeholder(fn(callable $get) => $get('reference_type') === 'auto' ? 'Auto Generated by System' : 'Enter Order/Invoice Number')
                    ->maxLength(25),

                Forms\Components\Select::make('reseller_id')
                    ->relationship('reseller', 'name')
                    ->searchable()
                    ->preload(),

                Forms\Components\Select::make('stock_out_status_id')
                    ->label('Status')
                    ->options([
                        2 => 'Draft / Pending',
                        1 => 'Completed',
                        3 => 'Cancelled',
                    ])
                    ->default(2)
                    ->required()
                    ->helperText(new HtmlString('
                        <strong>Keterangan</strong>:
                        <ul class="list-disc list-inside space-y-1">
                            <li><strong>Draft</strong>: Stok belum keluar gudang</li>
                            <li><strong>Completed</strong>: Stok sudah keluar gudang, final dan tidak dapat dirubah</li>
                            <li><strong>Cancelled</strong>: Stok dibatalkan</li>
                        </ul>
                    ')),

                Forms\Components\Section::make('Items')
                    ->description("Harap diingat, menyimpan stock out dengan status Draft / Pending terlalu lama, dapat menimbulkan redundansi data apabila ada order lain dengan item serupa yang sedang diproses.")
                    ->schema([
                        Forms\Components\Repeater::make('stockMovements')
                            ->relationship()
                            ->mutateRelationshipDataBeforeCreateUsing(function (array $data, Forms\Get $get): array {
                                return [
                                    ...$data,
                                    // 'warehouse_id' => $get('warehouse_id'),
                                    'type' => 'out',
                                    'stock_movement_status_id' => $get('stock_out_status_id'),
                                    'quantity' => -abs($data['quantity']), // Convert to negative
                                ];
                            })
                            ->mutateRelationshipDataBeforeSaveUsing(function (array $data, Forms\Get $get): array {
                                return [
                                    ...$data,
                                    // 'warehouse_id' => $get('warehouse_id'),
                                    'type' => 'out',
                                    'stock_movement_status_id' => $get('stock_out_status_id'),
                                    'quantity' => -abs($data['quantity']), // Convert to negative
                                ];
                            })
                            ->schema([
                                Forms\Components\Select::make('product_variant_id')
                                    ->relationship('productVariant', 'name')
                                    ->required()
                                    ->searchable()
                                    ->preload()
                                    ->live()
                                    ->afterStateUpdated(function (Forms\Set $set) {
                                        $set('warehouse_id', null);
                                        $set('quantity', 1);
                                    })
                                    ->options(function (): array {
                                        return \App\Models\ProductVariant::query()
                                            ->whereHas('stocks', function ($query) {
                                                $query->where('quantity', '>', 0);
                                            })
                                            ->get()
                                            ->pluck('name', 'id')
                                            ->toArray();
                                    }),

                                Forms\Components\Select::make('warehouse_id')
                                    ->relationship('warehouse', 'name')
                                    ->required()
                                    ->searchable()
                                    ->preload()
                                    ->live()
                                    ->afterStateUpdated(function (Forms\Set $set) {
                                        $set('quantity', 1);
                                    })
                                    ->options(function (Forms\Get $get): array {
                                        $variantId = $get('product_variant_id');
                                        if (!$variantId) return [];

                                        return \App\Models\Warehouse::query()
                                            ->whereHas('stocks', function ($query) use ($variantId) {
                                                $query->where('product_variant_id', $variantId)
                                                    ->where('quantity', '>', 0);
                                            })
                                            ->get()
                                            ->pluck('name', 'id')
                                            ->toArray();
                                    })
                                    ->visible(fn(Forms\Get $get) => (bool) $get('product_variant_id')),

                                Forms\Components\TextInput::make('quantity')
                                    ->numeric()
                                    ->required()
                                    ->minValue(1)
                                    ->default(1)
                                    ->live()
                                    ->formatStateUsing(fn($state) => abs($state))
                                    ->rules([
                                        function (Forms\Get $get) {
                                            return function (string $attribute, $value, \Closure $fail) use ($get) {
                                                // Skip validation if status is cancelled (3)
                                                if ((int) $get('../../stock_out_status_id') === 3) return;

                                                $warehouseId = $get('warehouse_id');
                                                $variantId = $get('product_variant_id');

                                                if (!$warehouseId || !$variantId) return;

                                                $currentStock = \App\Models\Stock::where([
                                                    'warehouse_id' => $warehouseId,
                                                    'product_variant_id' => $variantId,
                                                ])->value('quantity') ?? 0;

                                                // Get total quantity for this product in this warehouse from other items
                                                $totalQtyInRepeater = collect($get('../../stockMovements'))
                                                    ->filter(
                                                        fn($item) =>
                                                        $item['warehouse_id'] == $warehouseId &&
                                                            $item['product_variant_id'] == $variantId
                                                    )
                                                    ->sum('quantity');

                                                // Subtract current item's quantity as it's included in the total
                                                $totalQtyInRepeater -= $value;

                                                $availableStock = $currentStock - $totalQtyInRepeater;

                                                if ($value > $availableStock) {
                                                    $fail("Insufficient stock. Available: {$availableStock} (Total ordered: {$totalQtyInRepeater})");
                                                }
                                            };
                                        }
                                    ])
                                    ->visible(fn(Forms\Get $get) => (bool) $get('warehouse_id')),
                            ])
                            ->columns(3)
                            ->defaultItems(1)
                            ->addActionLabel('Add Item')
                            ->reorderable()
                            ->columnSpanFull(),
                    ]),

                Forms\Components\Textarea::make('notes')
                    ->placeholder('Write any additional information here')
                    ->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('reference_id')
                    ->label('Reference')
                    ->formatStateUsing(fn($record) => "{$record->reference_id} \ " . ucfirst($record->reference_type))
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('supplier.name')
                    ->searchable()
                    ->default('-none-')
                    ->sortable(),
                Tables\Columns\TextColumn::make('stock_movements_count')
                    ->counts('stockMovements')
                    ->label('Item')
                    ->sortable(),
                Tables\Columns\TextColumn::make('status.name')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'Draft / Pending' => 'warning',
                        'Completed' => 'success',
                        'Cancelled' => 'danger',
                        default => 'gray',
                    })
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('reseller_id')
                    ->relationship('reseller', 'name')
                    ->label('Reseller')
                    ->searchable()
                    ->preload(),
                Tables\Filters\SelectFilter::make('reference_type')
                    ->label('Reference ID Type')
                    ->options([
                        'auto' => 'Auto Generated',
                        'direct' => 'Direct Sale',
                        'shopee' => 'Shopee',
                        'tokped' => 'Tokopedia',
                        'tiktok' => 'TikTok Shop',
                    ]),
                Tables\Filters\SelectFilter::make('stock_out_status_id')
                    ->label('Status')
                    ->options([
                        2 => 'Draft / Pending',
                        1 => 'Completed',
                        3 => 'Cancelled',
                    ]),
            ])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->modalHeading('Stock Out Details'),
                Tables\Actions\EditAction::make()
                    ->visible(fn(StockOut $record): bool => $record->stock_out_status_id === 2),
                // Tables\Actions\DeleteAction::make()
                //     ->visible(fn(StockOut $record): bool => $record->stock_out_status_id === 2),
            ])
            ->bulkActions([
                //
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListStockOuts::route('/'),
            'create' => Pages\CreateStockOut::route('/create'),
            'view' => Pages\ViewStockOut::route('/{record}'),
            'edit' => Pages\EditStockOut::route('/{record}/edit'),
        ];
    }
}
